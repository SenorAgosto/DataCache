TODO: 
- In DataBlock, move field registration from constructor to static member so there is no runtime overhead to field registration. Then Rename FieldRegistrationLatch to FieldRegistrator. Will this create a problem with static initialization order? 

- Move functions out of UsingDataCacheIn declaration outside body.
- Make RegisterFieldLatch an inline friend to UsingDataCacheIn so that UsingDataCacheIn can be made protected/private. 

- Create Compile Time counter to implement DataBlockId. Each time we instantiate a DataBlock<> object it has a new unique compile time "field ID". This field ID will be used to register the field with the DataCache. 

- Move the mapping of local field ID to registered field ID to compile time.
- Move mapping of local field ID to registered field ID to a policy? 

- Consider implementing a traits class for specifying the counter type. 
  Defaulting to std::atomic<std::size_t> might be annoying for some users.
